\documentclass[12pt,a4paper]{article}
\usepackage[utf8]{inputenc}
\usepackage{amsmath}
\usepackage{amsthm}
\usepackage{amsfonts}
\usepackage{amssymb}
\usepackage[overload]{empheq}
\usepackage{color}
\usepackage[dvipsnames]{xcolor}
\usepackage{fullpage}

\title{PFSP heuristics project}

\author{Dorian Dumez}

\begin{document}
\maketitle

\section{Code}

\subsection{How to use}

In the code directory the command "make" (in the code directory) can be use to compile the whole project. Beside "make clean" (in the code directory too) delete all .o files.

After compiling the project experiment can be done on a single instance with "./main path\_to\_the\_instance optimal\_value". Then all possibility are use on this instance, for stochastic setting an average is done over 10 runs. Depending of the settings of the code execution time,value of solutions or proportional difference is output. This can be chose before compiling by the pre-compilator variable, commented or not, at the beginning of the "main.cpp" file. Values for each settings are separated by ":" in the text output.

To have these result on all instances the multiple\_run.sh script can be use. This bash script will execute the main on each instance and store all results in the res.txt file.\\

To compute few statistic R script have been created :
\begin{itemize}
\item
"compute\_average.R" which compute mean value for each algorithm. Values are taken in the file "tmp.txt", so it can be use to compute both average deviation and computation time. Values are output in the "avg.txt" file. We notice that an idicate line can be uncomment if the average is done with relative deviation in $\left[0;1\right]$ and the result is wanted in percentage. 
\item
"compute\_standard\_deviation.R" which calculate standard deviation, it's have been design in the same way as "compute\_average.R" and both take their input in "tmp.txt". Values are output in the "sd.txt" file. The same line can be uncomment to follow the same principle as "compute\_average.R".
\item
"wilcoxon\_test.R" compute p-value of the wilconxon pairwise test on each pair of column. Beside it compute the Bonferroni correction on each of them. Output table are stoked into the "wilconxon.txt" file. Input file is "tmp.txt".
\end{itemize}

\subsection{Datastructure of a solution}

The solution is represented by a permutation of jobs. It's stored in an static array, the compartment $n$ (we start at the index $0$) store the id of the $n+1$th job to do.

To compute the score we loop on both jobs and machine to compute end date of each jobs on each engine. Then we sum up, with weight, ends date on the last machine. So compute the score of a solution is done in $\Theta(nm)$, where $n$ is the number of jobs and $m$ the number of machine.

Beside, to avoid this too heavy computation time, we design a partial computation function. She use previous computed data to speed up this process. In fact when we compute end date, we store it into the solution's datastructure. And we can notice that end date of a job only depend of the previous one, so if only next one are modified we doesn't need to recompute it, because it doesn't change. In practice this function work like the classical computation of the score but start to compute end date from the index give in parameter, based on previous one. With that the complexity become $O(nm)$.

\subsection{Transpose neighbourhood}

The transpose neighbourhood is composed of all solution that can be reach by exchange of successive jobs. To scan it we just have to test, for all jobs, if the solution in which the job and the next are switch is better.

In practice we loop on jobs, for each one except the last, we switch him with the next one, then compute the score. If it's better than the actual solution we stop, else we switch them again and go to the next job. If the "dofor" mode is activated we doesn't stop, and just go to the next when we improve. If we are in deepest descent we always undo the switch, and if it's better than the best found so far in this scan we note the current index, after we can do this move in $O(1)$.

To avoid to compute the complete score each time we use the "recomputeWCT" function. But it's work only if jobs before the index parameter haven't been change since the previous computation of the score. Before we notice that we always compute the whole score before the loop to have the score of solution passed in parameter. So we just have to do the loop in the reverse order, start by switch last jobs, to be able to use the partial computation all the time.

\subsection{Exchange neighbourhood}

The exchange neighbourhood is composed of all solution that can be reach by exchange to job in the queue. To scan it we have, for each job, to test for all other if their switch improve.

In practice we loop on job, and inside we do an other loop to go all over jobs which are after in the queue. Indeed the switch is identical in both way, and we doesn't want to compute two times each neighbour. If it's better than the actual solution we stop, else we switch them again and go to the next job, when all are test we try to move the next job with next ones. If the "dofor" mode is activated we doesn't stop, and just go to the next when we improve. If we are in deepest descent we always undo the switch, and if it's better than the best found so far in this scan we note currents indexes, after we can do this move in $O(1)$.

With the same idea as before we use the "recomputeWCT" function. And to do it we again loops in the reverse order, so we try to exchange jobs with previous ones in the queue. But at the end of all second loop we need to fully compute the score to get the good end date table. Indeed if we change the last job after working on first one, the end date table might not be correct (in fact it's correct only if the first job has been change and the switch retain).

\subsection{Insert neighbourhood}

The insert neighbourhood is composed by all solution that can be reach by insert a job between two other. To scan it we need, for all jobs, to try all other places in the queue.

In practice we use two loop, the first one go all over jobs, and the second one move it. Indeed try all possible indexes for a job is equal to switch it with the next one (in a cyclic vision, with a modulo) $n$ times. So for all jobs we do this loop, if an improvement is find we stop all, else if move this job isn't worth we use a loop like the second one, but in reverse order, to bring him back at his original position. In the "dofor" mode we do the first loop for all jobs, and the second one run until an improvement (or the end of possibility). Beside in this mode to cross the neighborhood more efficiently we take care of testing move when his environment had been change. I mean when we insert a job before his current position instead of move the new job at the next index we try the one just after the new position of our job. And when the job is move forward we take care of doesn't skip a job because this part of the schedule is shift. Finally for the deepest descent we do all loop until the end, keep tracks of indexes of the best improvement, but in this case the application take a $O(n)$ to be done.

This time we use "recomputeWCT" slightly differently as previously. Indeed with the cyclic nature a reverse order wouldn't help. But we can still use it thank you to a modulo operation. After his behaviour will be near to this usage in the exchange neighbourhood.

\subsection{VND}

The implementation of VND is very classic. It have been implement in a generic way, with an array of neighbourhood to be re-used easily. Finally we need to notice that the first neighbourhood is used in descent so it's call in a slightly different way to use the "dofor" improvement if the neighbourhood is set for.

\section{Testing}

\subsection{Test's average of neighbourhood}

"tr" point out the transpose neighbourhood, "ex" exchange and "in" for insert. Finally "DD" means we use it int deepest descent. And we need to notice that all these experiment have been done in "dofor" mode.

\begin{table}[!h]
\centering
\begin{tabular}{|*{7}{c|}}
  \hline
  size & tr & trDD & ex & exDD & in & inDD \\
  \hline
  50 & 32.4 & 31.7 & 4.0 & 3.9 & 5.4 & 6.5 \\ %OK 
  100 & 41.2 & 41.2 & 4.7 & 4.7 & 6.4 & 9.1 \\ %OK
  all & 36.7 & 36.4 & 4.3 & 4.3 & 5.9 & 7.8 \\ %OK
  \hline
\end{tabular}
\caption{Relative deviation average in \% with random construction}
\label{Relative deviation with random construction}
\end{table}

\begin{table}[!h]
\centering
\begin{tabular}{|*{7}{c|}}
  \hline
  size & tr & trDD & ex & exDD & in & inDD \\
  \hline
  50 & 3.7 & 3.7 & 2.9 & 2.7 & 2.7 & 2.8 \\ %OK 
  100 & 4.6 & 4.6 & 3.6 & 3.5 & 3.4 & 3.6 \\ %OK
  all & 4.1 & 4.1 & 3.2 & 3.1 & 3.0 & 3.2 \\ %OK
  \hline
\end{tabular}
\caption{Relative deviation average in \% with rz construction}
\label{Relative deviation with rz construction}
\end{table}

\begin{table}[!h]
\centering
\begin{tabular}{|*{7}{c|}}
  \hline
  size & tr & trDD & ex & exDD & in & inDD \\
  \hline
  50 & 3.79 & 3.04 & 0.50 & 0.65 & 0.74 & 1.22 \\ %OK
  100 & 3.51 & 3.47 & 0.59 & 0.63 & 0.80 & 1.00 \\ %OK
  all & 5.75 & 5.76 & 0.64 & 0.76 & 0.90 & 1.70 \\ %OK
  \hline
\end{tabular}
\caption{standard deviation of the relative deviation with random construction}
\label{standard deviation of the relative deviation with random construction}
\end{table}


\begin{table}[!h]
\centering
\begin{tabular}{|*{7}{c|}}
  \hline
  size & tr & trDD & ex & exDD & in & inDD \\
  \hline
  50 & 0.86 & 0.86 & 0.84 & 0.71 & 0.61 & 0.60 \\ %OK 
  100 & 0.56 & 0.54 & 0.62 & 0.66 & 0.59 & 0.68 \\ %OK
  all & 0.86 & 0.85 & 0.81 & 0.78 & 0.68 & 0.74 \\ %OK
  \hline
\end{tabular}
\caption{standard deviation of the relative deviation with rz construction}
\label{standard deviation of the relative deviation with rz construction}
\end{table}


\begin{table}[!h]
\centering
\begin{tabular}{|*{7}{c|}}
  \hline
  size & tr & trDD & ex & exDD & in & inDD \\
  \hline
  50 & 0.001 & 0.006 & 0.05 & 0.249 & 0.12 & 0.47 \\ %OK
  100 & 0.005 & 0.046 & 0.46 & 3.6 & 1.27 & 6.13 \\ %OK
  all & 0.003 & 0.02 & 0.25 & 1.9 & 0.69 & 3.25 \\ %OK
  \hline
\end{tabular}
\caption{execution time average with random construction}
\label{Execution time with random construction}
\end{table}

\begin{table}[!h]
\centering
\begin{tabular}{|*{7}{c|}}
  \hline
  size & tr & trDD & ex & exDD & in & inDD \\
  \hline
  50 & 0.005 & 0.005 & 0.03 & 0.06 & 0.04 & 0.08 \\ %OK 
  100 & 0.038 & 0.040 & 0.36 & 0.84 & 0.45 & 1.21 \\ %OK
  all & 0.02 & 0.02 & 0.19 & 0.44 & 0.24 & 0.63 \\ %OK
  \hline
\end{tabular}
\caption{execution time average with rz construction}
\label{Execution time with rz construction}
\end{table}

\begin{table}[!h]
\centering
\begin{tabular}{|*{7}{c|}}
  \hline
  size & tr & trDD & ex & exDD & in & inDD \\
  \hline
  50 & 0.0002 & 0.0007 & 0.006 & 0.014 & 0.011 & 0.053 \\ %OK 
  100 & 0.008 & 0.007 & 0.043 & 0.244 & 0.111 & 0.486 \\ %OK
  all & 0.002 & 0.020 & 0.210 & 1.702 & 0.584 & 2.874 \\ %OK
  \hline
\end{tabular}
\caption{execution time standard deviation with random construction}
\label{Execution time with random construction sd}
\end{table}


\begin{table}[!h]
\centering
\begin{tabular}{|*{7}{c|}}
  \hline
  size & tr & trDD & ex & exDD & in & inDD \\
  \hline
  50 & 0.0002 & 0.0003 & 0.013 & 0.028 & 0.012 & 0.033 \\ %OK 
  100 & 0.001 & 0.001 & 0.121 & 0.327 & 0.134 & 0.482 \\ %OK
  all & 0.016 & 0.017 & 0.188 & 0.454 & 0.227 & 0.659 \\%OK
  \hline
\end{tabular}
\caption{execution time standard deviation with rz construction}
\label{Execution time with rz construction sd}
\end{table}


\subsection{Statistical test of neighbourhood}

We perform the wilcoxon test on score, in a pairwise way, with a significance level of $0.05$. These result are compiled in the table \ref{wilcoxon pairwise test, solution quality}. Beside we do the same calculation for the execution time, these results are in the table \ref{wilcoxon pairwise test, execution time}. A population isn't comparable to itself so NaN is used in these cases.

"tr", "ex" and "in" are use in the same way as previously for transpose, exchange and insert. "rnd" is used when the start solution isn't construct, and "rz" when the rz heuristic have been used. "DD" is always here when the descent have been done in deepest descent, i.e best improvement. Otherwise the pivoting rule is first improvement.

\begin{table}[!h]
\leftskip -1.9cm
{
\scriptsize
\begin{tabular}{|*{13}{c|}}
\hline
~ & rndtr & rndtrDD & rndex & rndexDD & rndin & rndinDD & rztr & rztrDD & rzex & rzexDD & rzin & rzinDD \\
\hline
rndtr & NaN & 7.83e-01 & 2.45e-11 & 2.45e-11 & 2.45e-11 & 2.45e-11 & 2.45e-11 & 2.45e-11 & 2.45e-11 & 2.45e-11 & 2.45e-11 & 2.45e-11 \\
rndtrDD & 7.83e-01 & NaN & 2.45e-11 & 2.45e-11 & 2.45e-11 & 2.45e-11 & 2.45e-11 & 2.45e-11 & 2.45e-11 & 2.45e-11 & 2.45e-11 & 2.45e-11 \\
rndex & 2.45e-11 & 2.45e-11 & NaN & 9.79e-01 & 2.58e-11 & 2.45e-11 & 4.04e-02 & 4.04e-02 & 7.86e-10 & 7.14e-11 & 2.45e-11 & 4.31e-11 \\
rndexDD & 2.45e-11 & 2.45e-11 & 9.79e-01 & NaN & 2.45e-11 & 2.45e-11 & 1.21e-01 & 8.87e-02 & 5.36e-10 & 8.30e-11 & 2.58e-11 & 1.67e-10 \\
rndin & 2.45e-11 & 2.45e-11 & 2.58e-11 & 2.45e-11 & NaN & 2.59e-10 & 5.55e-11 & 5.01e-11 & 2.45e-11 & 2.45e-11 & 2.45e-11 & 2.45e-11 \\
rndinDD & 2.45e-11 & 2.45e-11 & 2.45e-11 & 2.45e-11 & 2.59e-10 & NaN & 2.58e-11 & 2.58e-11 & 2.45e-11 & 2.45e-11 & 2.45e-11 & 2.45e-11 \\
rztr & 2.45e-11 & 2.45e-11 & 4.04e-02 & 1.21e-01 & 5.55e-11 & 2.58e-11 & NaN & 1.41e-01 & 2.93e-10 & 7.76e-11 & 2.45e-11 & 2.45e-11 \\
rztrDD & 2.45e-11 & 2.45e-11 & 4.04e-02 & 8.87e-02 & 5.01e-11 & 2.58e-11 & 1.41e-01 & NaN & 3.11e-10 & 7.76e-11 & 2.45e-11 & 2.45e-11 \\
rzex & 2.45e-11 & 2.45e-11 & 7.86e-10 & 5.36e-10 & 2.45e-11 & 2.45e-11 & 2.93e-10 & 3.11e-10 & NaN & 4.00e-02 & 3.76e-02 & 3.83e-01 \\
rzexDD & 2.45e-11 & 2.45e-11 & 7.14e-11 & 8.30e-11 & 2.45e-11 & 2.45e-11 & 7.76e-11 & 7.76e-11 & 4.00e-02 & NaN & 2.75e-01 & 3.28e-01 \\
rzin & 2.45e-11 & 2.45e-11 & 2.45e-11 & 2.58e-11 & 2.45e-11 & 2.45e-11 & 2.45e-11 & 2.45e-11 & 3.76e-02 & 2.75e-01 & NaN & 3.36e-02 \\
rzinDD & 2.45e-11 & 2.45e-11 & 4.31e-11 & 1.67e-10 & 2.45e-11 & 2.45e-11 & 2.45e-11 & 2.45e-11 & 3.83e-01 & 3.28e-01 & 3.36e-02 & NaN \\

\hline
\end{tabular}
\normalsize
}
\caption{wilcoxon pairwise test, solution quality}
\label{wilcoxon pairwise test, solution quality}
\end{table}

\begin{table}[!h]
\leftskip -1.9cm
{
\scriptsize
\begin{tabular}{|*{13}{c|}}
\hline
 & rndtr & rndtrDD & rndex & rndexDD & rndin & rndinDD & rztr & rztrDD & rzex & rzexDD & rzin & rzinDD \\
 \hline
rndtr & NaN & 2.45e-11 & 2.45e-11 & 2.45e-11 & 2.45e-11 & 2.45e-11 & 2.45e-11 & 2.45e-11 & 2.45e-11 & 2.45e-11 & 2.45e-11 & 2.45e-11 \\
rndtrDD & 2.45e-11 & NaN & 2.45e-11 & 2.45e-11 & 2.45e-11 & 2.45e-11 & 9.04e-09 & 1.10e-05 & 2.45e-11 & 2.45e-11 & 2.45e-11 & 2.45e-11 \\
rndex & 2.45e-11 & 2.45e-11 & NaN & 2.45e-11 & 2.45e-11 & 2.45e-11 & 2.45e-11 & 2.45e-11 & 2.03e-07 & 3.51e-06 & 2.65e-02 & 1.44e-10 \\
rndexDD & 2.45e-11 & 2.45e-11 & 2.45e-11 & NaN & 2.45e-11 & 2.45e-11 & 2.45e-11 & 2.45e-11 & 2.45e-11 & 2.45e-11 & 2.45e-11 & 2.45e-11 \\
rndin & 2.45e-11 & 2.45e-11 & 2.45e-11 & 2.45e-11 & NaN & 2.45e-11 & 2.45e-11 & 2.45e-11 & 2.45e-11 & 5.11e-10 & 2.45e-11 & 2.32e-03 \\
rndinDD & 2.45e-11 & 2.45e-11 & 2.45e-11 & 2.45e-11 & 2.45e-11 & NaN & 2.45e-11 & 2.45e-11 & 2.45e-11 & 2.45e-11 & 2.45e-11 & 2.45e-11 \\
rztr & 2.45e-11 & 9.04e-09 & 2.45e-11 & 2.45e-11 & 2.45e-11 & 2.45e-11 & NaN & 7.39e-09 & 2.45e-11 & 2.45e-11 & 2.45e-11 & 2.45e-11 \\
rztrDD & 2.45e-11 & 1.10e-05 & 2.45e-11 & 2.45e-11 & 2.45e-11 & 2.45e-11 & 7.39e-09 & NaN & 2.45e-11 & 2.45e-11 & 2.45e-11 & 2.45e-11 \\
rzex & 2.45e-11 & 2.45e-11 & 2.03e-07 & 2.45e-11 & 2.45e-11 & 2.45e-11 & 2.45e-11 & 2.45e-11 & NaN & 3.89e-11 & 1.22e-03 & 2.86e-11 \\
rzexDD & 2.45e-11 & 2.45e-11 & 3.51e-06 & 2.45e-11 & 5.11e-10 & 2.45e-11 & 2.45e-11 & 2.45e-11 & 3.89e-11 & NaN & 1.79e-07 & 4.06e-06 \\
rzin & 2.45e-11 & 2.45e-11 & 2.65e-02 & 2.45e-11 & 2.45e-11 & 2.45e-11 & 2.45e-11 & 2.45e-11 & 1.22e-03 & 1.79e-07 & NaN & 7.51e-11 \\
rzinDD & 2.45e-11 & 2.45e-11 & 1.44e-10 & 2.45e-11 & 2.32e-03 & 2.45e-11 & 2.45e-11 & 2.45e-11 & 2.86e-11 & 4.06e-06 & 7.51e-11 & NaN \\
  \hline
\end{tabular}
\normalsize
}
\caption{wilcoxon pairwise test, execution time}
\label{wilcoxon pairwise test, execution time}
\end{table}



We compute the average of the relative deviation, for all instances and all neighbourhood relation (in deepest descent and first improvement), when we start with a random solution and the rz heuristic. After we compute a pairwise wilcoxon test, compared value are always output by the same algorithm (same neighbourhood, same browsing, different initialisation) on the same instance so when a comparison is done only the initialization differ. With a random start the relative deviation average is $15.9 \%$ and with the heuristic it's $3.5 \%$. Finally the p-value of the wilcoxon pairwise test is $3.91e^{-59}$. So we can conclude that an initialisation with the rz heuristic is better as a starting point for a local search.

Then the same study have been done with the pivoting rule. With the first improvement the relative deviation average is $9.59 \%$ and with the deepest descent it's $9.85 \%$. Beside the p-value of the wilconxon pairwise test (same idea as before, the only things that differ between two compared value is the pivoting rule) is $0.000162$. Surprisingly the first improvement with a for loop give slightly better result than a deepest descent.

Finally we do this a third time with the neighbourhood relationship. With the transpose relation the relative deviation average (on every pivoting rules and starting point) is $20.73 \%$ (we notice the big difference between the two initialisation), with exchange it's $3.76 \%$ and with insert it's $5.02 \%$.
As before a wilconxon pairwise test have been computed, Befferoni corrected p-value are in the table \ref{wilconxon p-value of neighbourhood, solution quality}. So with that we can said that exchange is better than insert which is better than transpose, and the relation is transitive. But these results have bias because transpose and insert neighbourhood suffer much that exchange of the random initialisation. Indeed average only on rz heuristic of transpose is $4.15 \%$, it's $3.20 \%$ for exchange and $3.14 \%$ for insert. Beside p-value of this wilcoxon test are in the table \ref{wilconxon p-value of neighbourhood, solution quality with srz}. So with the rz initialisation the insert neighbourhood is the better one.

\begin{table}[!h]
\centering
\begin{tabular}{|*{4}{c|}}
  \hline
   & tr & ex & in\\
  \hline
tr & NaN & 4.79e-39 & 1.83e-40 \\
ex & 4.79e-39 & NaN & 6.02e-20 \\
in. & 1.83e-40 & 6.02e-20 & NaN \\
  \hline
\end{tabular}
\caption{wilconxon p-value of neighbourhood, solution quality}
\label{wilconxon p-value of neighbourhood, solution quality}
\end{table}

\begin{table}[!h]
\centering
\begin{tabular}{|*{4}{c|}}
  \hline
   & tr & ex & in\\
  \hline
tr & NaN & 4.79e-39 & 1.83e-40 \\
ex & 4.79e-39 & NaN & 6.02e-20 \\
in. & 1.83e-40 & 6.02e-20 & NaN \\
  \hline
\end{tabular}
\caption{wilconxon p-value of neighbourhood, solution quality with srz}
\label{wilconxon p-value of neighbourhood, solution quality with srz}
\end{table}

With all of that the best setting might be the insert neighbourhood browse in first improvement with a for loop starting by the rz heuristic. According to the table \ref{Relative deviation with random construction}, \ref{Relative deviation with rz construction} and \ref{wilcoxon pairwise test, solution quality} it's true. Except that we can't said that population of a best improvement in a exchange neighbourhood (initialised by the rz heuristic) is different with a threshold of $0.05$.\\

Now go on the executions time point of view.

The average computation time average overall in first improvement is $35.83$ seconds against $252.8$ seconds for the deepest descent. Beside we can notice that for every variant the first improvement version is always faster than the deepest version one, at least until the instance size level (so on average on same instance size first improvement is faster). So no need to a wilcoxon test to understand that the first improvement is clearly faster.

The average computation (over all other settings) time with the transpose neighbourhood is $2.11$ seconds, $104.28$ seconds with exchange and $326.70$ with insert. And the p-value of the pairwise wilconxon test, table \ref{Befferoni corrected wilconxon p-value of neighbourhood time}, show that it's absolutely not an average artefact. So the descent in the transpose neighbourhood take clearly less time to reach a local optima, then exchange is slower but faster than insert.
\begin{table}[!h]
\centering
\begin{tabular}{|*{4}{c|}}
  \hline
   & tr & ex & in\\
  \hline
	tr & NaN & 1.1e-39 & 1.1e-39 \\
	ex & 1.1e-39 & NaN & 1.1e-39 \\
	in. & 1.1e-39 & 1.1e-39 & NaN \\
  \hline
\end{tabular}
\caption{Befferoni corrected wilconxon p-value of neighbourhood, execution time}
\label{Befferoni corrected wilconxon p-value of neighbourhood time}
\end{table}

To conclude about the usage of a single neighbourhood we can prefer the exchange neighbourhood in first improvement, but the initialisation doesn't matter. Indeed in the first part we said that all usage of this neighbourhood was equal regard of the solution quality (Cf table \ref{Relative deviation with random construction}, \ref{Relative deviation with rz construction}, \ref{Befferoni correction of the wilcoxon pairwise test}), and in the second on we said that first improvement is faster that deepest descent but initialisation doesn't matter (Cf table \ref{Execution time with random construction}, \ref{Execution time with rz construction}, \ref{Befferoni correction of the wilcoxon pairwise test time}).

\subsection{Test's average of VND}

VND1 indicate the VND algorithm which use transpose, then exchange and finish with insert. VND2 is for the one which use transpose, then insert, then exchange. DD mean we use neighbourhoods in deepest descent. Same as previously the transpose neighbourhood is use in "dofor" mode.

\begin{table}[!h]
\centering
\begin{tabular}{|*{5}{c|}}
  \hline
  size & VND1 & VND1DD & VND2 & VND2DD\\
  \hline
  50 & 3.5 & 3.6 & 4.2 & 4.3 \\ %OK 
  100 & 4.4 & 4.7 & 5.4 & 5.4 \\ %OK
  all & 3.9 & 4.1 & 4.8 & 4.8 \\ %OK
  \hline
\end{tabular}
\caption{relative deviation average in \% with random construction}
\label{relative deviation of VND with random construction}
\end{table}

\begin{table}[!h]
\centering
\begin{tabular}{|*{5}{c|}}
  \hline
  size & VND1 & VND1DD & VND2 & VND2DD\\
  \hline
  50 & 2.2 & 2.3 & 2.4 & 2.6 \\ %OK 
  100 & 3.0 & 3.0 & 3.2 & 3.2 \\ %OK
  all & 2.6 & 2.7 & 2.8 & 2.9 \\ %OK
  \hline
\end{tabular}
\caption{relative deviation average in \% with rz construction}
\label{relative deviation of VND with rz construction}
\end{table}

\begin{table}[!h]
\centering
\begin{tabular}{|*{5}{c|}}
  \hline
  size & VND1 & VND1DD & VND2 & VND2DD\\
  \hline
  50 & 0.68 & 0.62 & 0.52 & 0.81 \\ %OK 
  100 & 0.91 & 0.57 & 0.76 & 0.52 \\ %OK
  all & 0.91 & 0.79 & 0.89 & 0.84 \\ %OK
  \hline
\end{tabular}
\caption{standard deviation of the relative deviation with random construction}
\label{standard deviation of the relative deviation of VND with random construction}
\end{table}

\begin{table}[!h]
\centering
\begin{tabular}{|*{5}{c|}}
  \hline
  size & VND1 & VND1DD & VND2 & VND2DD\\
  \hline
  50 & 0.61 & 0.61 & 0.56 & 0.52 \\ %OK 
  100 & 0.58 & 0.66 & 0.51 & 0.59 \\ %OK
  all & 0.70 & 0.73 & 0.65 & 0.62 \\ %OK
  \hline
\end{tabular}
\caption{standard deviation of the relative deviation with rz construction}
\label{standard deviation of the relative deviation of VND with rz construction}
\end{table}


\begin{table}[!h]
\centering
\begin{tabular}{|*{5}{c|}}
  \hline
  size & VND1 & VND1DD & VND2 & VND2DD\\
  \hline
  50 & 0.28 & 0.29 & 0.44 & 0.44 \\ %OK 
  100 & 4.38 & 3.69 & 7.96 & 6.34 \\ %OK
  all & 2.30 & 1.96 & 4.14 & 3.34 \\ %OK
  \hline
\end{tabular}
\caption{execution time average with random construction}
\label{execution time of VND with random construction}
\end{table}

\begin{table}[!h]
\centering
\begin{tabular}{|*{5}{c|}}
  \hline
  size & VND1 & VND1DD & VND2 & VND2DD\\
  \hline
  50 & 0.09 & 0.11 & 0.07 & 0.10 \\ %OK 
  100 & 1.05 & 1.25 & 0.97 & 1.34 \\ %OK
  all & 0.56 & 0.67 & 0.51 & 0.71 \\ %OK
  \hline
\end{tabular}
\caption{execution time average with rz construction}
\label{execution time of VND with rz construction}
\end{table}

\begin{table}[!h]
\centering
\begin{tabular}{|*{5}{c|}}
  \hline
  size & VND1 & VND1DD & VND2 & VND2DD\\
  \hline
  50 & 0.040 & 0.026 & 0.048 & 0.038 \\ %OK 
  100 & 0.461 & 0.353 & 0.923 & 0.402 \\ %OK
  all & 2.088 & 1.732 & 3.849 & 2.992 \\ %OK
  \hline
\end{tabular}
\caption{execution time standard deviation with random construction}
\label{execution time of VND with random construction sd}
\end{table}

\begin{table}[!h]
\centering
\begin{tabular}{|*{5}{c|}}
  \hline
  size & VND1 & VND1DD & VND2 & VND2DD\\
  \hline
  50 & 0.036 & 0.043 & 0.036 & 0.046 \\ %OK 
  100 & 0.388 & 0.425 & 0.302 & 0.323 \\ %OK
  all & 0.553 & 0.649 & 0.499 & 0.666 \\ %OK
  \hline
\end{tabular}
\caption{execution time standard deviation with rz construction}
\label{execution time of VND with rz construction sd}
\end{table}


\begin{table}[!h]
\centering
\begin{tabular}{|*{9}{c|}}
  \hline
   & rndex & rndexDD & rndin & rndinDD & rzex & rzexDD & rzin & rzinDD \\
  \hline
  rndVND1 & 0.42 & 0.38 & 3.17 & 3.66 & 0.42 & 0.61 & 2.15 & 2.27 \\
  rndVND1DD & 0.38 & 0.34 & 3.13 & 3.63 & 0.39 & 0.58 & 2.11 & 2.24 \\
  rzVND1 & 0.53 & 0.48 & 3.28 & 3.77 & 0.53 & 0.72 & 2.25 & 2.38 \\
  rzVND1DD & 0.44 & 0.39 & 3.19 & 3.68 & 0.44 & 0.63 & 2.17 & 2.29 \\
  rndVND2 & -0.43 & -0.47 & 2.28 & 2.77 & -0.43 & -0.24 & 1.27 & 1.40 \\
  rndVND2DD & -0.49 & -0.53 & 2.23 & 2.72 & -0.48 & -0.29 & 1.22 & 1.34 \\
  rzVND2 & 0.09 & 0.04 & 2.82 & 3.32 & 0.09 & 0.28 & 1.80 & 1.93 \\
  rzVND2DD & 0.007 & -0.03 & 2.74 & 3.23 & 0.01 & 0.20 & 1.72 & 1.85 \\
  \hline
\end{tabular}
\caption{relative improvement average of VND to single neighbourhood, in \%}
\label{relative improvement average of VND to single neighbourhood}
\end{table}

~\\

\subsection{Statistical test of VND}
 
We perform the wilcoxon test on score, in a pairwise way, and after applied the Bonferroni correction to the obtained p-value. A population isn't comparable to itself so NaN is used in these cases. First, in the table \ref{Befferoni correction of the wilcoxon pairwise test VND}, VND version are compared to each other. Secondly, in the table \ref{Befferoni correction of the wilcoxon pairwise test VND-single neighbourhood}, VND version are compared to the usage of a single neighbourhood. Finally, after the comparison in term of solution quality, we compared VND version regard of the execution time, result are in the table \ref{Befferoni correction of the wilcoxon pairwise test VND time}, and \ref{Befferoni correction of the wilcoxon pairwise test VND-single neighbourhood time} for the comparison with single neighbourhood usage.
 
\begin{table}[!h]
\leftskip -1.6cm
{
\footnotesize
\begin{tabular}{|*{9}{c|}}
  \hline
& rndVND1 & rndVND1DD & rzVND1 & rzVND1DD & rndVND2 & rndVND2DD & rzVND2 & rzVND2DD \\
\hline
rndVND1 & NaN & 2.89e-02 & 3.51e-11 & 1.30e-10 & 4.01e-09 & 2.09e-08 & 1.07e-10 & 2.03e-10 \\
rndVND1DD & 2.89e-02 & NaN & 2.45e-11 & 3.01e-11 & 7.86e-08 & 5.85e-08 & 3.17e-11 & 4.53e-11 \\
rzVND1 & 3.51e-11 & 2.45e-11 & NaN & 2.49e-01 & 2.45e-11 & 2.45e-11 & 1.83e-02 & 3.91e-04 \\
rzVND1DD & 1.30e-10 & 3.01e-11 & 2.49e-01 & NaN & 2.72e-11 & 2.45e-11 & 1.33e-01 & 1.26e-02 \\
rndVND2 & 4.01e-09 & 7.86e-08 & 2.45e-11 & 2.72e-11 & NaN & 8.47e-01 & 2.58e-11 & 2.58e-11 \\
rndVND2DD & 2.09e-08 & 5.85e-08 & 2.45e-11 & 2.45e-11 & 8.47e-01 & NaN & 2.45e-11 & 2.45e-11 \\
rzVND2 & 1.07e-10 & 3.17e-11 & 1.83e-02 & 1.33e-01 & 2.58e-11 & 2.45e-11 & NaN & 3.59e-01 \\
rzVND2DD & 2.03e-10 & 4.53e-11 & 3.91e-04 & 1.26e-02 & 2.58e-11 & 2.45e-11 & 3.59e-01 & NaN \\
  \hline
\end{tabular}
\normalsize
}
\caption{wilcoxon pairwise test, solution quality}
\label{wilcoxon pairwise test VND}
\end{table} 

\begin{table}[!h]
\leftskip -2.1cm
{
\scriptsize
\begin{tabular}{|*{13}{c|}}
\hline
& rndtr & rndtrDD & rndex & rndexDD & rndin & rndinDD & rztr & rztrDD & rzex & rzexDD & rzin & rzinDD \\
\hline
rndVND1 & 2.45e-11 & 2.45e-11 & 6.37e-04 & 1.39e-03 & 2.45e-11 & 2.45e-11 & 2.38e-01 & 2.50e-01 & 2.52e-06 & 6.37e-08 & 9.96e-10 & 6.93e-08 \\
rndVND1DD & 2.45e-11 & 2.45e-11 & 7.06e-02 & 8.32e-02 & 2.45e-11 & 2.45e-11 & 6.16e-01 & 4.90e-01 & 3.50e-09 & 1.75e-10 & 5.55e-11 & 7.14e-10 \\
rzVND1 & 2.45e-11 & 2.45e-11 & 2.45e-11 & 2.45e-11 & 2.45e-11 & 2.45e-11 & 2.45e-11 & 2.45e-11 & 5.61e-08 & 7.53e-08 & 8.31e-06 & 2.00e-08 \\
rzVND1DD & 2.45e-11 & 2.45e-11 & 2.45e-11 & 2.45e-11 & 2.45e-11 & 2.45e-11 & 2.45e-11 & 2.45e-11 & 4.17e-07 & 7.22e-07 & 1.13e-04 & 4.34e-07 \\
rndVND2 & 2.45e-11 & 2.45e-11 & 3.27e-06 & 2.72e-06 & 2.03e-10 & 2.45e-11 & 2.26e-06 & 1.67e-06 & 9.18e-11 & 3.51e-11 & 2.45e-11 & 3.89e-11 \\
rndVND2DD & 2.45e-11 & 2.45e-11 & 3.78e-06 & 2.26e-06 & 1.15e-09 & 2.58e-11 & 2.80e-07 & 2.03e-07 & 1.24e-10 & 2.45e-11 & 2.45e-11 & 2.45e-11 \\
rzVND2 & 2.45e-11 & 2.45e-11 & 2.45e-11 & 2.72e-11 & 2.45e-11 & 2.45e-11 & 2.45e-11 & 2.45e-11 & 7.47e-06 & 1.07e-03 & 1.28e-03 & 6.95e-07 \\
rzVND2DD & 2.45e-11 & 2.45e-11 & 2.58e-11 & 2.45e-11 & 2.45e-11 & 2.45e-11 & 2.45e-11 & 2.45e-11 & 1.49e-04 & 1.06e-02 & 1.76e-02 & 5.59e-05\\
  \hline
\end{tabular}
\normalsize
}
\caption{wilcoxon pairwise test, solution quality}
\label{wilcoxon pairwise test VND-single neighbourhood}
\end{table} 



\begin{table}[!h]
\leftskip -1.6cm
{
\footnotesize
\begin{tabular}{|*{9}{c|}}
  \hline
 & rndVND1 & rndVND1DD & rzVND1 & rzVND1DD & rndVND2 & rndVND2DD & rzVND2 & rzVND2DD \\
 \hline
rndVND1 & NaN & 4.70e-06 & 2.45e-11 & 2.45e-11 & 2.45e-11 & 2.45e-11 & 2.45e-11 & 2.45e-11 \\
rndVND1DD & 4.70e-06 & NaN & 2.45e-11 & 2.45e-11 & 2.45e-11 & 2.45e-11 & 2.45e-11 & 2.45e-11 \\
rzVND1 & 2.45e-11 & 2.45e-11 & NaN & 7.80e-03 & 2.45e-11 & 2.45e-11 & 4.76e-02 & 3.22e-04 \\
rzVND1DD & 2.45e-11 & 2.45e-11 & 7.80e-03 & NaN & 2.45e-11 & 2.45e-11 & 8.15e-04 & 7.03e-01 \\
rndVND2 & 2.45e-11 & 2.45e-11 & 2.45e-11 & 2.45e-11 & NaN & 1.87e-06 & 2.45e-11 & 2.45e-11 \\
rndVND2DD & 2.45e-11 & 2.45e-11 & 2.45e-11 & 2.45e-11 & 1.87e-06 & NaN & 2.45e-11 & 2.45e-11 \\
rzVND2 & 2.45e-11 & 2.45e-11 & 4.76e-02 & 8.15e-04 & 2.45e-11 & 2.45e-11 & NaN & 6.04e-06 \\
rzVND2DD & 2.45e-11 & 2.45e-11 & 3.22e-04 & 7.03e-01 & 2.45e-11 & 2.45e-11 & 6.04e-06 & NaN \\
  \hline
\end{tabular}
\normalsize
}
\caption{wilcoxon pairwise test, execution time}
\label{wilcoxon pairwise test VND time}
\end{table} 

\begin{table}[!h]
\leftskip -2.1cm
{
\scriptsize
\begin{tabular}{|*{13}{c|}}
  \hline
 & rndtr & rndtrDD & rndex & rndexDD & rndin & rndinDD & rztr & rztrDD & rzex & rzexDD & rzin & rzinDD \\
 \hline
rndVND1 & 2.45e-11 & 2.45e-11 & 2.45e-11 & 1.84e-10 & 2.45e-11 & 2.45e-11 & 2.45e-11 & 2.45e-11 & 2.45e-11 & 2.45e-11 & 2.45e-11 & 2.45e-11 \\
rndVND1DD & 2.45e-11 & 2.45e-11 & 2.45e-11 & 4.93e-03 & 2.45e-11 & 2.45e-11 & 2.45e-11 & 2.45e-11 & 2.45e-11 & 2.45e-11 & 2.45e-11 & 2.45e-11 \\
rzVND1 & 2.45e-11 & 2.45e-11 & 1.59e-10 & 2.45e-11 & 1.45e-05 & 2.45e-11 & 2.45e-11 & 2.45e-11 & 1.07e-10 & 1.32e-03 & 1.75e-10 & 5.84e-01 \\
rzVND1DD & 2.45e-11 & 2.45e-11 & 3.01e-11 & 2.45e-11 & 1.01e-01 & 2.45e-11 & 2.45e-11 & 2.45e-11 & 2.58e-11 & 1.79e-07 & 1.18e-10 & 5.10e-02 \\
rndVND2 & 2.45e-11 & 2.45e-11 & 2.45e-11 & 2.45e-11 & 2.45e-11 & 8.28e-05 & 2.45e-11 & 2.45e-11 & 2.45e-11 & 2.45e-11 & 2.45e-11 & 2.45e-11 \\
rndVND2DD & 2.45e-11 & 2.45e-11 & 2.45e-11 & 2.45e-11 & 2.45e-11 & 9.61e-01 & 2.45e-11 & 2.45e-11 & 2.45e-11 & 2.45e-11 & 2.45e-11 & 2.45e-11 \\
rzVND2 & 2.45e-11 & 2.45e-11 & 9.96e-10 & 2.45e-11 & 2.83e-08 & 2.45e-11 & 2.45e-11 & 2.45e-11 & 5.55e-11 & 1.44e-01 & 3.31e-10 & 3.30e-02 \\
rzVND2DD & 2.45e-11 & 2.45e-11 & 3.70e-11 & 2.45e-11 & 9.01e-01 & 2.45e-11 & 2.45e-11 & 2.45e-11 & 2.45e-11 & 6.37e-08 & 2.58e-11 & 1.57e-01 \\
rndVND1 & 2.45e-11 & 2.45e-11 & 2.45e-11 & 1.84e-10 & 2.45e-11 & 2.45e-11 & 2.45e-11 & 2.45e-11 & 2.45e-11 & 2.45e-11 & 2.45e-11 & 2.45e-11 \\
rndVND1DD & 2.45e-11 & 2.45e-11 & 2.45e-11 & 4.93e-03 & 2.45e-11 & 2.45e-11 & 2.45e-11 & 2.45e-11 & 2.45e-11 & 2.45e-11 & 2.45e-11 & 2.45e-11 \\
rzVND1 & 2.45e-11 & 2.45e-11 & 1.59e-10 & 2.45e-11 & 1.45e-05 & 2.45e-11 & 2.45e-11 & 2.45e-11 & 1.07e-10 & 1.32e-03 & 1.75e-10 & 5.84e-01 \\
rzVND1DD & 2.45e-11 & 2.45e-11 & 3.01e-11 & 2.45e-11 & 1.01e-01 & 2.45e-11 & 2.45e-11 & 2.45e-11 & 2.58e-11 & 1.79e-07 & 1.18e-10 & 5.10e-02 \\

  \hline
\end{tabular}
\normalsize
}
\caption{wilcoxon pairwise test, execution time}
\label{wilcoxon pairwise test VND-single neighbourhood time}
\end{table} 
 
 
First speak about the solution quality reach by the two order of neighbourhood used by VND. The average relative deviation overall with VND1 is $3.98 \%$ and it's $4.66 \%$ with VND2, beside the corrected p-value of the pairwise wilcoxon test is $1.29e^{-18}$. So we can conclude that VND1 perform better quality solution. But after VND1 version aren't comparable to each other relatively to the solution quality, according to the table \ref{Befferoni correction of the wilcoxon pairwise test VND} we can't say that results populations are different.

Secondly we look at the computation time of these two neighbourhood order. The average overall of VND1 is $225.2$ seconds against $670.2$ seconds for VND2 with a wilcoxon p-value of $3.65e^{-40}$. So VND1 outperformed again VND2. As before, regarding to table \ref{execution time of VND with random construction}, \ref{execution time of VND with rz construction}, and \ref{Befferoni correction of the wilcoxon pairwise test VND time}, we can just say that with a random initialisation VND1 in first improvement is faster than VND1 in deepest descent.

To conclude about VND we can just say that VND2 is completely dominated by VND1, but VND1 versions are equals. In the first part conclusion we preferred exchange in first improvement, so which one is the best. According to table \ref{relative improvement average of VND to single neighbourhood} and \ref{Befferoni correction of the wilcoxon pairwise test VND-single neighbourhood} we can't said that VND1 in first improvement and exchange in first improvement give better solution. And according to table \ref{Execution time with random construction}, \ref{Relative deviation with rz construction}, \ref{execution time of VND with random construction}, \ref{execution time of VND with rz construction} and \ref{Befferoni correction of the wilcoxon pairwise test VND-single neighbourhood time} we can say that the single neighbourhood is faster than VND1 when both are used in first improvement (and now matter which construction heuristic is chosen).
 
\section{Conclusion}

Do a descent in first improvement (with a for loop) into an exchange neighbourhood, and no matter how the initial solution solution is construct, is the best algorithm we study here for the PFSP.

As a further development we can study a VND algorithm which use only exchange and insert. Indeed in the first part we saw that transpose doesn't find any good solution, so it seems it doesn't help other neighbourhood to converge faster in a VND. But quite the opposite it will slow down them because they won't be able to converge with a for loop and useless search phase into transpose neighbourhood will be performed between every search into promising neighbourhood.

Finally, even if we haven't speak about that before, we can notice that all algorithm are very stable over all point of view across table \ref{standard deviation of the relative deviation with random construction}, \ref{standard deviation of the relative deviation with rz construction}, \ref{Execution time with random construction sd}, \ref{Execution time with rz construction sd}, \ref{standard deviation of the relative deviation of VND with random construction}, \ref{standard deviation of the relative deviation of VND with rz construction}, \ref{execution time of VND with random construction sd}, \ref{execution time of VND with rz construction sd}.
\end{document}